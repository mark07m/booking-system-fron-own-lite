#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m',
  bold: '\x1b[1m',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
function runCommand(command, description) {
  console.log(`${colors.blue}${colors.bold}üîÑ ${description}${colors.reset}`);
  
  try {
    const output = execSync(command, { 
      stdio: 'pipe', 
      encoding: 'utf8',
      cwd: process.cwd()
    });
    
    console.log(`${colors.green}‚úÖ ${description} - –£—Å–ø–µ—à–Ω–æ${colors.reset}`);
    return { success: true, output };
  } catch (error) {
    console.log(`${colors.red}‚ùå ${description} - –û—à–∏–±–∫–∞${colors.reset}`);
    console.log(`${colors.red}${error.stdout || error.message}${colors.reset}`);
    return { success: false, error: error.stdout || error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function checkDependencies() {
  console.log(`${colors.cyan}${colors.bold}üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${colors.reset}`);
  
  const installResult = runCommand('pnpm install --frozen-lockfile', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
  return installResult;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–Ω—Ç–µ—Ä–∞
function checkLinting() {
  console.log(`${colors.cyan}${colors.bold}üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞...${colors.reset}`);
  
  const lintResult = runCommand('pnpm run lint', '–ü—Ä–æ–≤–µ—Ä–∫–∞ ESLint');
  return lintResult;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function checkFormatting() {
  console.log(`${colors.cyan}${colors.bold}üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...${colors.reset}`);
  
  const formatResult = runCommand('pnpm run format:check', '–ü—Ä–æ–≤–µ—Ä–∫–∞ Prettier');
  return formatResult;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
function checkTypes() {
  console.log(`${colors.cyan}${colors.bold}üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤...${colors.reset}`);
  
  const typeResult = runCommand('pnpm run typecheck', '–ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript');
  return typeResult;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤
function checkTests() {
  console.log(`${colors.cyan}${colors.bold}üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤...${colors.reset}`);
  
  const testResult = runCommand('pnpm run test:ci', '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤');
  return testResult;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±–æ—Ä–∫–∏
function checkBuild() {
  console.log(`${colors.cyan}${colors.bold}üèóÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏...${colors.reset}`);
  
  const buildResult = runCommand('pnpm run build', '–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞');
  return buildResult;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function checkSecurity() {
  console.log(`${colors.cyan}${colors.bold}üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...${colors.reset}`);
  
  const securityResult = runCommand('pnpm run security:audit', '–ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
  return securityResult;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
function checkQuality() {
  console.log(`${colors.cyan}${colors.bold}‚≠ê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...${colors.reset}`);
  
  const qualityResult = runCommand('pnpm run quality:check', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞');
  return qualityResult;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log(`${colors.magenta}${colors.bold}üöÄ –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ CI/CD${colors.reset}\n`);
  
  const startTime = Date.now();
  const results = [];
  
  // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫
  const checks = [
    { name: 'Dependencies', fn: checkDependencies },
    { name: 'Linting', fn: checkLinting },
    { name: 'Formatting', fn: checkFormatting },
    { name: 'Types', fn: checkTypes },
    { name: 'Tests', fn: checkTests },
    { name: 'Build', fn: checkBuild },
    { name: 'Security', fn: checkSecurity },
    { name: 'Quality', fn: checkQuality }
  ];
  
  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
  checks.forEach((check, index) => {
    console.log(`\n${colors.white}${colors.bold}--- –ü—Ä–æ–≤–µ—Ä–∫–∞ ${index + 1}/${checks.length}: ${check.name} ---${colors.reset}`);
    
    const result = check.fn();
    results.push({
      name: check.name,
      success: result.success,
      error: result.error
    });
    
    if (!result.success) {
      console.log(`${colors.red}‚ùå ${check.name} - –ü–†–û–í–ê–õ–ï–ù–ê${colors.reset}`);
    } else {
      console.log(`${colors.green}‚úÖ ${check.name} - –ü–†–û–ô–î–ï–ù–ê${colors.reset}`);
    }
  });
  
  // –ò—Ç–æ–≥–∏
  const endTime = Date.now();
  const duration = ((endTime - startTime) / 1000).toFixed(2);
  
  console.log(`\n${colors.magenta}${colors.bold}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò${colors.reset}`);
  console.log(`${colors.white}${'='.repeat(50)}${colors.reset}`);
  
  const passed = results.filter(r => r.success).length;
  const failed = results.filter(r => !r.success).length;
  
  results.forEach(result => {
    const status = result.success ? 
      `${colors.green}‚úÖ –ü–†–û–ô–î–ï–ù–ê${colors.reset}` : 
      `${colors.red}‚ùå –ü–†–û–í–ê–õ–ï–ù–ê${colors.reset}`;
    console.log(`${result.name.padEnd(15)} ${status}`);
  });
  
  console.log(`${colors.white}${'='.repeat(50)}${colors.reset}`);
  console.log(`${colors.cyan}–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${results.length}${colors.reset}`);
  console.log(`${colors.green}–ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}${colors.reset}`);
  console.log(`${colors.red}–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}${colors.reset}`);
  console.log(`${colors.magenta}–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}—Å${colors.reset}`);
  
  if (failed === 0) {
    console.log(`\n${colors.green}${colors.bold}üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!${colors.reset}`);
    console.log(`${colors.green}–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é! üöÄ${colors.reset}`);
    process.exit(0);
  } else {
    console.log(`\n${colors.red}${colors.bold}üí• –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–í–ê–õ–ï–ù–´${colors.reset}`);
    console.log(`${colors.red}–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º! üîß${colors.reset}`);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
    console.log(`\n${colors.yellow}${colors.bold}–î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:${colors.reset}`);
    results.filter(r => !r.success).forEach(result => {
      console.log(`\n${colors.red}${result.name}:${colors.reset}`);
      console.log(result.error);
    });
    
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
if (args.includes('--help') || args.includes('-h')) {
  console.log(`
${colors.bold}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${colors.reset}
  node scripts/ci-check.js [–æ–ø—Ü–∏–∏]

${colors.bold}–û–ø—Ü–∏–∏:${colors.reset}
  --help, -h     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  --quick        –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–±–µ–∑ —Ç–µ—Å—Ç–æ–≤ –∏ —Å–±–æ—Ä–∫–∏)
  --full         –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

${colors.bold}–ü—Ä–∏–º–µ—Ä—ã:${colors.reset}
  node scripts/ci-check.js
  node scripts/ci-check.js --quick
  node scripts/ci-check.js --full
`);
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main();
