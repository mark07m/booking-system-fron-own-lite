#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m',
  bold: '\x1b[1m',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
function runCommand(command, description) {
  console.log(`${colors.blue}${colors.bold}üîÑ ${description}${colors.reset}`);
  
  try {
    const output = execSync(command, { 
      stdio: 'pipe', 
      encoding: 'utf8',
      cwd: process.cwd()
    });
    
    console.log(`${colors.green}‚úÖ ${description} - –£—Å–ø–µ—à–Ω–æ${colors.reset}`);
    return { success: true, output };
  } catch (error) {
    console.log(`${colors.red}‚ùå ${description} - –û—à–∏–±–∫–∞${colors.reset}`);
    console.log(`${colors.red}${error.stdout || error.message}${colors.reset}`);
    return { success: false, error: error.stdout || error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Å–±–æ—Ä–∫–∏
function checkBuildSize() {
  console.log(`${colors.cyan}${colors.bold}üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–±–æ—Ä–∫–∏...${colors.reset}`);
  
  const buildPaths = [
    'apps/owner/.next',
    'apps/owner/dist',
    'packages/ui/dist',
    'packages/theme/dist'
  ];
  
  let totalSize = 0;
  const buildInfo = [];
  
  buildPaths.forEach(buildPath => {
    if (fs.existsSync(buildPath)) {
      const stats = getDirectorySize(buildPath);
      totalSize += stats.size;
      buildInfo.push({
        path: buildPath,
        size: stats.size,
        files: stats.files
      });
      
      console.log(`${colors.green}üìÅ ${buildPath}: ${formatBytes(stats.size)} (${stats.files} —Ñ–∞–π–ª–æ–≤)${colors.reset}`);
    }
  });
  
  console.log(`${colors.magenta}${colors.bold}üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Å–±–æ—Ä–∫–∏: ${formatBytes(totalSize)}${colors.reset}`);
  
  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
  if (totalSize > 50 * 1024 * 1024) { // 50MB
    console.log(`${colors.yellow}‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –†–∞–∑–º–µ—Ä —Å–±–æ—Ä–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50MB${colors.reset}`);
  }
  
  return { success: true, totalSize, buildInfo };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function getDirectorySize(dirPath) {
  let size = 0;
  let files = 0;
  
  function calculateSize(itemPath) {
    const stats = fs.statSync(itemPath);
    
    if (stats.isDirectory()) {
      const items = fs.readdirSync(itemPath);
      items.forEach(item => {
        calculateSize(path.join(itemPath, item));
      });
    } else {
      size += stats.size;
      files++;
    }
  }
  
  calculateSize(dirPath);
  return { size, files };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤ –±–∞–π—Ç–∞—Ö
function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
function checkBuildPerformance() {
  console.log(`${colors.cyan}${colors.bold}‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏...${colors.reset}`);
  
  const startTime = Date.now();
  
  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫
  runCommand('pnpm run clean', '–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫');
  
  // –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
  const buildResult = runCommand('pnpm run build', '–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞');
  
  const endTime = Date.now();
  const buildTime = endTime - startTime;
  
  console.log(`${colors.magenta}${colors.bold}‚è±Ô∏è  –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: ${(buildTime / 1000).toFixed(2)}—Å${colors.reset}`);
  
  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–±–æ—Ä–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∞—è
  if (buildTime > 120000) { // 2 –º–∏–Ω—É—Ç—ã
    console.log(`${colors.yellow}‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –°–±–æ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç${colors.reset}`);
  }
  
  return { success: buildResult.success, buildTime };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
function checkBuildCorrectness() {
  console.log(`${colors.cyan}${colors.bold}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏...${colors.reset}`);
  
  const checks = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–±–æ—Ä–∫–∏
  const requiredFiles = [
    'apps/owner/.next/static',
    'packages/ui/dist',
    'packages/theme/dist'
  ];
  
  requiredFiles.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      console.log(`${colors.green}‚úÖ ${filePath} - –Ω–∞–π–¥–µ–Ω${colors.reset}`);
      checks.push({ file: filePath, exists: true });
    } else {
      console.log(`${colors.red}‚ùå ${filePath} - –Ω–µ –Ω–∞–π–¥–µ–Ω${colors.reset}`);
      checks.push({ file: filePath, exists: false });
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è source maps
  const sourceMapFiles = [
    'apps/owner/.next/static/chunks/*.js.map',
    'packages/ui/dist/**/*.js.map'
  ];
  
  let hasSourceMaps = false;
  sourceMapFiles.forEach(pattern => {
    const files = glob.sync(pattern);
    if (files.length > 0) {
      hasSourceMaps = true;
    }
  });
  
  if (hasSourceMaps) {
    console.log(`${colors.green}‚úÖ Source maps –Ω–∞–π–¥–µ–Ω—ã${colors.reset}`);
  } else {
    console.log(`${colors.yellow}‚ö†Ô∏è  Source maps –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${colors.reset}`);
  }
  
  return { success: checks.every(check => check.exists), checks };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log(`${colors.magenta}${colors.bold}üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞${colors.reset}\n`);
  
  const startTime = Date.now();
  let allPassed = true;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
  const performanceResult = checkBuildPerformance();
  if (!performanceResult.success) {
    allPassed = false;
  }
  
  console.log();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–±–æ—Ä–∫–∏
  const sizeResult = checkBuildSize();
  if (!sizeResult.success) {
    allPassed = false;
  }
  
  console.log();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
  const correctnessResult = checkBuildCorrectness();
  if (!correctnessResult.success) {
    allPassed = false;
  }
  
  console.log();
  
  // –ò—Ç–æ–≥–∏
  const endTime = Date.now();
  const duration = ((endTime - startTime) / 1000).toFixed(2);
  
  if (allPassed) {
    console.log(`${colors.green}${colors.bold}üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${colors.reset}`);
    console.log(`${colors.green}‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}—Å${colors.reset}`);
    console.log(`${colors.green}üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${formatBytes(sizeResult.totalSize)}${colors.reset}`);
    console.log(`${colors.green}‚ö° –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: ${(performanceResult.buildTime / 1000).toFixed(2)}—Å${colors.reset}`);
    process.exit(0);
  } else {
    console.log(`${colors.red}${colors.bold}üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±–æ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã${colors.reset}`);
    console.log(`${colors.red}‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}—Å${colors.reset}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main();
