#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m',
  bold: '\x1b[1m',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
function runCommand(command, description) {
  console.log(`${colors.blue}${colors.bold}üîÑ ${description}${colors.reset}`);
  
  try {
    const output = execSync(command, { 
      stdio: 'pipe', 
      encoding: 'utf8',
      cwd: process.cwd()
    });
    
    console.log(`${colors.green}‚úÖ ${description} - –£—Å–ø–µ—à–Ω–æ${colors.reset}`);
    return { success: true, output };
  } catch (error) {
    console.log(`${colors.red}‚ùå ${description} - –û—à–∏–±–∫–∞${colors.reset}`);
    console.log(`${colors.red}${error.stdout || error.message}${colors.reset}`);
    return { success: false, error: error.stdout || error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
function checkVulnerabilities() {
  console.log(`${colors.cyan}${colors.bold}üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö...${colors.reset}`);
  
  const auditResult = runCommand('pnpm audit --audit-level moderate', '–ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
  
  if (auditResult.success) {
    console.log(`${colors.green}‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ${colors.reset}`);
  } else {
    console.log(`${colors.red}‚ùå –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö${colors.reset}`);
  }
  
  return auditResult;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function checkOutdatedDependencies() {
  console.log(`${colors.cyan}${colors.bold}üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${colors.reset}`);
  
  const outdatedResult = runCommand('pnpm outdated', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤');
  
  if (outdatedResult.success) {
    console.log(`${colors.green}‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã${colors.reset}`);
  } else {
    console.log(`${colors.yellow}‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏${colors.reset}`);
  }
  
  return outdatedResult;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–π
function checkLicenses() {
  console.log(`${colors.cyan}${colors.bold}üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–π...${colors.reset}`);
  
  try {
    const licenseResult = runCommand('pnpm licenses list', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–π');
    
    if (licenseResult.success) {
      console.log(`${colors.green}‚úÖ –õ–∏—Ü–µ–Ω–∑–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã${colors.reset}`);
    }
    
    return licenseResult;
  } catch (error) {
    console.log(`${colors.yellow}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–∞–∫–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)${colors.reset}`);
    return { success: true };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function checkConfigFiles() {
  console.log(`${colors.cyan}${colors.bold}‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...${colors.reset}`);
  
  const configFiles = [
    '.env.example',
    '.env.local.example',
    'next.config.ts',
    'tsconfig.json',
    'eslint.config.mjs',
    'tailwind.config.js'
  ];
  
  let allConfigsExist = true;
  
  configFiles.forEach(file => {
    if (fs.existsSync(file)) {
      console.log(`${colors.green}‚úÖ ${file} - –Ω–∞–π–¥–µ–Ω${colors.reset}`);
    } else {
      console.log(`${colors.yellow}‚ö†Ô∏è  ${file} - –Ω–µ –Ω–∞–π–¥–µ–Ω${colors.reset}`);
      allConfigsExist = false;
    }
  });
  
  return { success: allConfigsExist };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ
function checkSecrets() {
  console.log(`${colors.cyan}${colors.bold}üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ...${colors.reset}`);
  
  const secretPatterns = [
    /password\s*=\s*['"][^'"]+['"]/gi,
    /api[_-]?key\s*=\s*['"][^'"]+['"]/gi,
    /secret\s*=\s*['"][^'"]+['"]/gi,
    /token\s*=\s*['"][^'"]+['"]/gi,
    /private[_-]?key\s*=\s*['"][^'"]+['"]/gi
  ];
  
  const filesToCheck = [
    'apps/owner/src/**/*.{ts,tsx,js,jsx}',
    'packages/**/*.{ts,tsx,js,jsx}',
    '*.{js,ts,json}'
  ];
  
  let foundSecrets = false;
  
  filesToCheck.forEach(pattern => {
    try {
      const files = glob.sync(pattern);
      files.forEach(file => {
        const content = fs.readFileSync(file, 'utf8');
        secretPatterns.forEach(pattern => {
          if (pattern.test(content)) {
            console.log(`${colors.red}‚ùå –í–æ–∑–º–æ–∂–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ ${file}${colors.reset}`);
            foundSecrets = true;
          }
        });
      });
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    }
  });
  
  if (!foundSecrets) {
    console.log(`${colors.green}‚úÖ –°–µ–∫—Ä–µ—Ç—ã –≤ –∫–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${colors.reset}`);
  }
  
  return { success: !foundSecrets };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTPS
function checkHTTPS() {
  console.log(`${colors.cyan}${colors.bold}üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...${colors.reset}`);
  
  const configFiles = [
    'next.config.ts',
    'next.config.js',
    'package.json'
  ];
  
  let hasHTTPS = false;
  
  configFiles.forEach(file => {
    if (fs.existsSync(file)) {
      const content = fs.readFileSync(file, 'utf8');
      if (content.includes('https') || content.includes('SSL') || content.includes('TLS')) {
        hasHTTPS = true;
        console.log(`${colors.green}‚úÖ HTTPS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ ${file}${colors.reset}`);
      }
    }
  });
  
  if (!hasHTTPS) {
    console.log(`${colors.yellow}‚ö†Ô∏è  HTTPS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${colors.reset}`);
  }
  
  return { success: true };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log(`${colors.magenta}${colors.bold}üõ°Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞${colors.reset}\n`);
  
  const startTime = Date.now();
  let allPassed = true;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
  const vulnerabilitiesResult = checkVulnerabilities();
  if (!vulnerabilitiesResult.success) {
    allPassed = false;
  }
  
  console.log();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const outdatedResult = checkOutdatedDependencies();
  if (!outdatedResult.success) {
    allPassed = false;
  }
  
  console.log();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–π
  const licensesResult = checkLicenses();
  if (!licensesResult.success) {
    allPassed = false;
  }
  
  console.log();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  const configResult = checkConfigFiles();
  if (!configResult.success) {
    allPassed = false;
  }
  
  console.log();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
  const secretsResult = checkSecrets();
  if (!secretsResult.success) {
    allPassed = false;
  }
  
  console.log();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS
  const httpsResult = checkHTTPS();
  if (!httpsResult.success) {
    allPassed = false;
  }
  
  console.log();
  
  // –ò—Ç–æ–≥–∏
  const endTime = Date.now();
  const duration = ((endTime - startTime) / 1000).toFixed(2);
  
  if (allPassed) {
    console.log(`${colors.green}${colors.bold}üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${colors.reset}`);
    console.log(`${colors.green}‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}—Å${colors.reset}`);
    process.exit(0);
  } else {
    console.log(`${colors.red}${colors.bold}üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã${colors.reset}`);
    console.log(`${colors.red}‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}—Å${colors.reset}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main();
