name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "8"

jobs:
  # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=production" >> $GITHUB_OUTPUT
          fi

      - name: Set version
        id: set-version
        run: |
          VERSION=$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::7}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

  # –°–±–æ—Ä–∫–∞ –¥–ª—è –¥–µ–ø–ª–æ—è
  build:
    name: Build for Deployment
    runs-on: ubuntu-latest
    needs: prepare
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r apps/*/dist deployment/ 2>/dev/null || true
          cp -r apps/*/.next deployment/ 2>/dev/null || true
          cp -r packages/*/dist deployment/ 2>/dev/null || true
          cp package.json deployment/
          cp pnpm-lock.yaml deployment/
          cp pnpm-workspace.yaml deployment/

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-${{ needs.prepare.outputs.version }}
          path: deployment/
          retention-days: 7

  # –î–µ–ø–ª–æ–π –≤ staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.prepare.outputs.environment == 'staging'
    environment: staging
    
    steps:
      - name: Download deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-${{ needs.prepare.outputs.version }}

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Version: ${{ needs.prepare.outputs.version }}"
          # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–µ–ø–ª–æ—è –≤ staging
          # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ —Ç.–¥.

      - name: Health check
        run: |
          echo "üîç Performing health check..."
          # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
          sleep 10
          echo "‚úÖ Staging deployment successful!"

  # –î–µ–ø–ª–æ–π –≤ production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.prepare.outputs.environment == 'production'
    environment: production
    
    steps:
      - name: Download deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-${{ needs.prepare.outputs.version }}

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "Version: ${{ needs.prepare.outputs.version }}"
          # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–µ–ø–ª–æ—è –≤ production
          # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ —Ç.–¥.

      - name: Health check
        run: |
          echo "üîç Performing health check..."
          # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
          sleep 10
          echo "‚úÖ Production deployment successful!"

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare.outputs.version }}
          release_name: Release v${{ needs.prepare.outputs.version }}
          body: |
            ## Changes in this Release
            - Automated deployment from commit ${{ github.sha }}
            - Version: ${{ needs.prepare.outputs.version }}
            
            ## Deployment Details
            - Environment: Production
            - Build: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
          draft: false
          prerelease: false

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–ø–ª–æ–µ
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [prepare, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
        run: |
          echo "‚úÖ Deployment to ${{ needs.prepare.outputs.environment }} successful!"
          echo "Version: ${{ needs.prepare.outputs.version }}"
          
      - name: Notify failure
        if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        run: |
          echo "‚ùå Deployment to ${{ needs.prepare.outputs.environment }} failed!"
          echo "Version: ${{ needs.prepare.outputs.version }}"
          exit 1
