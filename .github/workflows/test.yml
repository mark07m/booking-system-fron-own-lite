name: Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "8"

jobs:
  # Unit тесты
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            pnpm test
          else
            echo "No unit tests configured yet"
          fi

  # E2E тесты
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Run E2E tests
        run: |
          if [ -f "package.json" ] && grep -q '"test:e2e"' package.json; then
            pnpm test:e2e
          else
            echo "No E2E tests configured yet"
          fi

  # Тесты производительности
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Run performance tests
        run: |
          if [ -f "package.json" ] && grep -q '"test:perf"' package.json; then
            pnpm test:perf
          else
            echo "No performance tests configured yet"
          fi

  # Покрытие кода
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        run: |
          if [ -f "package.json" ] && grep -q '"test:coverage"' package.json; then
            pnpm test:coverage
          else
            echo "No coverage tests configured yet"
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports-${{ github.sha }}
          path: |
            coverage/
            **/coverage/
          retention-days: 30

  # Результаты тестирования
  test-results:
    name: Test Results
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, performance-tests, coverage]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Unit tests: ${{ needs.unit-tests.result }}"
          echo "E2E tests: ${{ needs.e2e-tests.result }}"
          echo "Performance tests: ${{ needs.performance-tests.result }}"
          echo "Coverage: ${{ needs.coverage.result }}"
          
          if [ "${{ needs.unit-tests.result }}" != "success" ]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          
          echo "✅ All tests passed successfully!"
