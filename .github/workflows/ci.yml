name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "8"

jobs:
  # Проверка качества кода
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm run lint

      - name: Check code formatting
        run: pnpm run format:check

      - name: Type check
        run: pnpm run typecheck

      - name: Check commit messages
        if: github.event_name == 'push'
        run: npx commitlint --from HEAD~1 --to HEAD --verbose

  # Сборка проекта
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: quality
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Upload build artifacts
        if: matrix.node-version == 20
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            apps/*/dist
            apps/*/.next
            packages/*/dist
          retention-days: 7

  # Проверка безопасности
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for known vulnerabilities
        run: pnpm audit --audit-level high --json > audit-results.json || true

      - name: Upload security audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results-${{ github.sha }}
          path: audit-results.json
          retention-days: 30

  # Проверка зависимостей
  dependencies:
    name: Dependencies Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Check for outdated dependencies
        run: pnpm outdated || true

      - name: Check for duplicate dependencies
        run: pnpm list --depth=0 --json | jq '.dependencies | keys | group_by(.) | map(select(length > 1))' || true

  # Уведомления
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [quality, build, security, dependencies]
    if: always()
    
    steps:
      - name: Notify on success
        if: needs.quality.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success'
        run: |
          echo "✅ All checks passed successfully!"
          
      - name: Notify on failure
        if: needs.quality.result == 'failure' || needs.build.result == 'failure' || needs.security.result == 'failure'
        run: |
          echo "❌ Some checks failed!"
          exit 1

